/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tests.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aartamon <aartamon@student.42malaga.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/27 18:30:42 by aartamon          #+#    #+#             */
/*   Updated: 2023/12/01 17:35:26 by aartamon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "libft.h"

void	test_isalpha(char **str)
{
	int		i;
	char	c;

	puts("Testing ft_isalpha:");
	i = 0;
	while (str[i])
	{
		c = str[i][0];
		if (isalpha(c) == ft_isalpha(c))
			printf("\tValue \'%c\': test passed\n", c);
		else
			printf("\tValue \'%c\': test didn't pass\n", c);
		i++;
	}
}

void	test_isdigit(char **str)
{
	int		i;
	char	c;

	puts("Testing ft_isdigit:");
	i = 0;
	while (str[i])
	{
		c = str[i][0];
		if (isdigit(c) == ft_isdigit(c))
			printf("\tValue \'%c\': test passed\n", c);
		else
			printf("\tValue \'%c\': test didn't pass\n", c);
		i++;
	}
}

void	test_isascii(void)
{
	int		i;
	int		j;
	char	c;

	puts("Testing ft_isascii:");
	i = -1;
	j = 128;
	while (i <= j)
	{
		c = i;
		if (isascii(c) == ft_isascii(c))
			printf("\tValue \'%c\' (%d): test passed\n", c, i);
		else
			printf("\tValue \'%c\' (%d): test didn't pass\n", c, i);
		i++;
	}
}

void	test_isprint(void)
{
	int		i;
	int		j;
	char	c;

	i = -1;
	j = 128;
	puts("Testing ft_isprint:");
	while (i <= j)
	{
		c = i;
		if (isprint(c) == ft_isprint(c))
			printf("\tValue \'%c\' (%d): test passed\n", c, i);
		else
			printf("\tValue \'%c\' (%d): test didn't pass\n", c, i);
		i++;
	}
}

void	test_tolower(void)
{
	int		i;
	int		j;
	char	c;

	i = -1;
	j = 128;
	puts("Testing ft_tolower:");
	while (i <= j)
	{
		c = i;
		if (tolower(c) == ft_tolower(c))
			printf("\tValue \'%c\' (%d): test passed\n", c, i);
		else
			printf("\tValue \'%c\' (%d): test didn't pass\n", c, i);
		i++;
	}
}

void	test_toupper(void)
{
	int		i;
	int		j;
	char	c;

	i = -1;
	j = 128;
	puts("Testing ft_tolower:");
	while (i <= j)
	{
		c = i;
		if (toupper(c) == ft_toupper(c))
			printf("\tValue \'%c\' (%d): test passed\n", c, i);
		else
			printf("\tValue \'%c\' (%d): test didn't pass\n", c, i);
		i++;
	}
}

void	test_strlen(char **str)
{
	int		i;
	char	*w;

	puts("Testing ft_strlen:");
	i = 0;
	while (str[i])
	{
		w = str[i];
		if (strlen(w) == ft_strlen(w))
			printf("\tInput value \'%s\', return value \'%lu\': test passed\n",\
			w, ft_strlen(w));
		else
			printf("\tInput value \'%s\', return value \'%lu\': test didn't pass\n",\
			w, ft_strlen(w));
		i++;
	}
}

void	test_atoi(char **str)
{
	int		i;
	char	*w;

    //puts("Testing ft_atoi:");
	printf("Testing %s\n",  __func__);
	i = 1;
	while (str[i])
    {
		w = str[i];
		if (atoi(w) == ft_atoi(w))
			printf("\tInput value \'%s\', return value \'%d\': test passed\n", w, ft_atoi(w));
		else
			printf("\tInput value \'%s\', return value \'%d\': test didn't pass\n", w, ft_atoi(w));
		i++;
	}
}

void    test_strrchr(char **str)
{
	int		i;
	int		j;
	int		c;
	char	*w;

    printf("Testing %s\n",  __func__);
    i = 0;
	/*while (str[i])
	{
		i++;
	}
	if (i < 1)
	{
		printf("Function __func__ needs more arguments. Only %d was provided", i);
		return;
	}*/
	i = -1;
	j = 128;
	w = str[1];
	while (i <= j)
    {
		c = i;
		if (strrchr(w, c) == ft_strrchr(w, c))
			printf("\tInput value \'%s\', return value \'%s\': test passed\n", w, ft_strrchr(w, c));
		else
			printf("\tInput value \'%s\', return value \'%s\': test didn't pass\n", w, strrchr(w, c));
		i++;
	}
	puts("testing special case, c=\\0:");
	int add = 1024;
	int b = '\0';
	w = "teste";
	c = b + add;
	printf("testing special case, c=\'%c\'+%d: (\'%c\')\n",b, add, c);
	if (strrchr(w, c) == ft_strrchr(w, c))
		printf("\tInput value \'%s\', return value \'%s\': test passed\n", w, ft_strrchr(w, c));
	else
		printf("\tInput value \'%s\', ft_strrchr(w, c) \'%s\', strrchr(w, c) \'%s\': test didn't pass\n", w, ft_strrchr(w, c), strrchr(w, c));
	b = 's';
	c = b + add;
	printf("testing special case, c=\'%c\'+%d: (\'%c\')\n",b, add, c);	
	if (strrchr(w, c) == ft_strrchr(w, c))
		printf("\tInput value \'%s\', return value \'%s\': test passed\n", w, ft_strrchr(w, c));
	else
		printf("\tInput value \'%s\', ft_strrchr(w, c) \'%s\', strrchr(w, c) \'%s\': test didn't pass\n", w, ft_strrchr(w, c), strrchr(w, c));


}

void	test_strncmp(char **argv)
{
	unsigned int		i;

	i = 3;

	printf("Testing %s\n",  __func__);
	if (strncmp(argv[0], argv[1], i) == ft_strncmp(argv[0], argv[1], i))
		printf("\tInp value 1\'%s\', Inp value 2\'%s\',return value \'%d\': test passed\n", \
		argv[0], argv[1], ft_strncmp(argv[0], argv[1], i));
	else
		printf("\tInp value 1\'%s\', Inp value 2\'%s\',return value \'%d\': test didn't pass\n",\
		argv[0], argv[1], ft_strncmp(argv[0], argv[1], i));

	// while (str[i])
 //    {
	// 	w = str[i];
	// 	if (atoi(w) == ft_atoi(w))
	// 		printf("\tInput value \'%s\', return value \'%d\': test passed\n", w, ft_atoi(w));
	// 	else
	// 		printf("\tInput value \'%s\', return value \'%d\': test didn't pass\n", w, ft_atoi(w));
	// 	i++;
	// }
}

int	main(int argc, char **argv)
{
	int		i;
	char	c;

	if (argc < 2)
	{
		printf("Enter at least one value\n");
		return (0);
	}
	i = 1;
	c = argv[1][0];
	printf("Printing c = argv[1][0] %c\n", c);
	/*	test_isalpha(argv);
	test_isdigit(argv);
	i = isdigit(argv[1][i]); //to do something just to supress compilator warnings about unused variables
	ft_isdigit(argv[1][0]);
	test_isascii();
	test_isprint();
	test_tolower();
	printf("additional testing to lower,\
		initial value='%c', result='%c'\n", c, ft_tolower(c));
	test_toupper();
	printf("additional testing to upper,\
		initial value='%c', result='%c'\n", c, ft_toupper(c));
	test_strlen(argv);*/
	// test_atoi(argv);
	// test_strchr(argv);
	// test_strrchr(argv);
	// test_strncmp(argv);

	char	*str1 = "abc";
	char	*str2 = "12";

	while (*str1 && *str2)
	{
		printf("str1='%c', str2='%c'\n", *str1, *str2);
		str1++, str2++;
	}
	return (0);
}
